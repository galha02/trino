<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>io.trino</groupId>
        <artifactId>trino-root</artifactId>
        <version>453-SNAPSHOT</version>
        <relativePath>../../pom.xml</relativePath>
    </parent>

    <artifactId>trino-spi</artifactId>
    <description>Trino - Service Provider Interface (SPI)</description>

    <properties>
        <released-artifacts.dir>${project.build.directory}/released-artifacts</released-artifacts.dir>
        <trino.check.skip-revapi>${air.check.skip-basic}</trino.check.skip-revapi>
    </properties>

    <!-- the SPI should have only minimal dependencies -->
    <dependencies>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>

        <dependency>
            <groupId>com.google.errorprone</groupId>
            <artifactId>error_prone_annotations</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>io.airlift</groupId>
            <artifactId>slice</artifactId>
        </dependency>

        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-api</artifactId>
        </dependency>

        <dependency>
            <groupId>jakarta.annotation</groupId>
            <artifactId>jakarta.annotation-api</artifactId>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-context</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.openjdk.jol</groupId>
            <artifactId>jol-core</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.airlift</groupId>
            <artifactId>json</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.airlift</groupId>
            <artifactId>junit-extensions</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.airlift</groupId>
            <artifactId>testing</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.trino</groupId>
            <artifactId>trino-testing-services</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>it.unimi.dsi</groupId>
            <artifactId>fastutil</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-core</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-generator-annprocess</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <filtering>true</filtering>
                <directory>src/main/resources</directory>
                <includes>
                    <include>io/trino/spi/trino-spi-version.txt</include>
                </includes>
            </resource>

            <resource>
                <filtering>false</filtering>
                <directory>src/main/resources</directory>
                <excludes>
                    <exclude>io/trino/spi/trino-spi-version.txt</exclude>
                </excludes>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.revapi</groupId>
                <artifactId>revapi-maven-plugin</artifactId>
                <version>0.15.0</version>
                <configuration>
                    <skip>${trino.check.skip-revapi}</skip>
                    <ignoreSuggestionsFormat>xml</ignoreSuggestionsFormat>
                    <analysisConfiguration>
                        <revapi.filter>
                            <elements>
                                <exclude>
                                    <item>
                                        <matcher>java</matcher>
                                        <match>@io.trino.spi.Experimental(*) ^*;</match>
                                    </item>
                                </exclude>
                            </elements>
                        </revapi.filter>
                        <revapi.differences>
                            <ignore>true</ignore>
                            <differences>
                                <!-- Allow adding new annotations (such as @Nullable) -->
                                <item>
                                    <code>java.annotation.added</code>
                                </item>
                                <!-- Allow changing enum constant order (e.g., StandardErrorCode) -->
                                <item>
                                    <code>java.field.enumConstantOrderChanged</code>
                                </item>
                                <!-- Allow arbitrary changes to unstable APIs -->
                                <item>
                                    <regex>true</regex>
                                    <code>java.method.numberOfParametersChanged</code>
                                    <old>
                                        <matcher>java</matcher>
                                        <match>@io.trino.spi.Unstable *;</match>
                                    </old>
                                </item>
                                <!-- Allow removing things that were previously deprecated -->
                                <item>
                                    <regex>true</regex>
                                    <code>java\.(class|method|field)\.removed</code>
                                    <old>
                                        <matcher>java</matcher>
                                        <match>@java.lang.Deprecated(*) ^*;</match>
                                    </old>
                                </item>
                                <!-- Backwards incompatible changes since the previous release -->
                                <!-- Any exclusions below can be deleted after each release -->
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.annotation.attributeValueChanged</code>
                                    <old>interface io.trino.spi.connector.LocalProperty&lt;E&gt;</old>
                                    <new>interface io.trino.spi.connector.LocalProperty&lt;E&gt;</new>
                                    <annotationType>com.fasterxml.jackson.annotation.JsonSubTypes</annotationType>
                                    <attribute>value</attribute>
                                    <oldValue>{@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.connector.ConstantProperty.class, name = "constant"), @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.connector.SortingProperty.class, name = "sorting"), @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.connector.GroupingProperty.class, name = "grouping")}</oldValue>
                                    <newValue>{@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.connector.ConstantProperty.class, name = "constant"), @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.connector.GroupingProperty.class, name = "grouping"), @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.connector.SortingProperty.class, name = "sorting")}</newValue>
                                    <justification>cleanup</justification>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.annotation.attributeValueChanged</code>
                                    <old>interface io.trino.spi.eventlistener.TableReferenceInfo</old>
                                    <new>interface io.trino.spi.eventlistener.TableReferenceInfo</new>
                                    <annotationType>com.fasterxml.jackson.annotation.JsonSubTypes</annotationType>
                                    <attribute>value</attribute>
                                    <oldValue>{@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.eventlistener.ViewReferenceInfo.class, name = "view"), @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.eventlistener.MaterializedViewReferenceInfo.class, name = "materializedView"), @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.eventlistener.RowFilterReferenceInfo.class, name = "rowFilter"), @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.eventlistener.ColumnMaskReferenceInfo.class, name = "columnMask")}</oldValue>
                                    <newValue>{@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.eventlistener.ColumnMaskReferenceInfo.class, name = "columnMask"), @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.eventlistener.MaterializedViewReferenceInfo.class, name = "materializedView"), @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.eventlistener.RowFilterReferenceInfo.class, name = "rowFilter"), @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.eventlistener.ViewReferenceInfo.class, name = "view")}</newValue>
                                    <justification>cleanup</justification>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.annotation.attributeValueChanged</code>
                                    <old>interface io.trino.spi.predicate.ValueSet</old>
                                    <new>interface io.trino.spi.predicate.ValueSet</new>
                                    <annotationType>com.fasterxml.jackson.annotation.JsonSubTypes</annotationType>
                                    <attribute>value</attribute>
                                    <oldValue>{@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.predicate.EquatableValueSet.class, name = "equatable"), @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.predicate.SortedRangeSet.class, name = "sortable"), @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.predicate.AllOrNoneValueSet.class, name = "allOrNone")}</oldValue>
                                    <newValue>{@com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.predicate.AllOrNoneValueSet.class, name = "allOrNone"), @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.predicate.EquatableValueSet.class, name = "equatable"), @com.fasterxml.jackson.annotation.JsonSubTypes.Type(value = io.trino.spi.predicate.SortedRangeSet.class, name = "sortable")}</newValue>
                                    <justification>cleanup</justification>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.method.parameterTypeParameterChanged</code>
                                    <old>parameter io.trino.spi.block.ArrayBlock io.trino.spi.block.ArrayBlock::fromElementBlock(int, ===java.util.Optional&lt;boolean[]&gt;===, int[], io.trino.spi.block.Block)</old>
                                    <new>parameter io.trino.spi.block.ArrayBlock io.trino.spi.block.ArrayBlock::fromElementBlock(int, ===java.util.Optional&lt;byte[]&gt;===, int[], io.trino.spi.block.Block)</new>
                                    <parameterIndex>1</parameterIndex>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.method.parameterTypeParameterChanged</code>
                                    <old>parameter void io.trino.spi.block.ByteArrayBlock::&lt;init&gt;(int, ===java.util.Optional&lt;boolean[]&gt;===, byte[])</old>
                                    <new>parameter void io.trino.spi.block.ByteArrayBlock::&lt;init&gt;(int, ===java.util.Optional&lt;byte[]&gt;===, byte[])</new>
                                    <parameterIndex>1</parameterIndex>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.method.parameterTypeParameterChanged</code>
                                    <old>parameter void io.trino.spi.block.Fixed12Block::&lt;init&gt;(int, ===java.util.Optional&lt;boolean[]&gt;===, int[])</old>
                                    <new>parameter void io.trino.spi.block.Fixed12Block::&lt;init&gt;(int, ===java.util.Optional&lt;byte[]&gt;===, int[])</new>
                                    <parameterIndex>1</parameterIndex>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.method.parameterTypeParameterChanged</code>
                                    <old>parameter void io.trino.spi.block.Int128ArrayBlock::&lt;init&gt;(int, ===java.util.Optional&lt;boolean[]&gt;===, long[])</old>
                                    <new>parameter void io.trino.spi.block.Int128ArrayBlock::&lt;init&gt;(int, ===java.util.Optional&lt;byte[]&gt;===, long[])</new>
                                    <parameterIndex>1</parameterIndex>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.method.parameterTypeParameterChanged</code>
                                    <old>parameter void io.trino.spi.block.IntArrayBlock::&lt;init&gt;(int, ===java.util.Optional&lt;boolean[]&gt;===, int[])</old>
                                    <new>parameter void io.trino.spi.block.IntArrayBlock::&lt;init&gt;(int, ===java.util.Optional&lt;byte[]&gt;===, int[])</new>
                                    <parameterIndex>1</parameterIndex>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.method.parameterTypeParameterChanged</code>
                                    <old>parameter void io.trino.spi.block.LongArrayBlock::&lt;init&gt;(int, ===java.util.Optional&lt;boolean[]&gt;===, long[])</old>
                                    <new>parameter void io.trino.spi.block.LongArrayBlock::&lt;init&gt;(int, ===java.util.Optional&lt;byte[]&gt;===, long[])</new>
                                    <parameterIndex>1</parameterIndex>
                                    <justification>ADD YOUR EXPLANATION FOR THE NECESSITY OF THIS CHANGE</justification>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.method.parameterTypeParameterChanged</code>
                                    <old>parameter io.trino.spi.block.MapBlock io.trino.spi.block.MapBlock::createMapBlockInternal(io.trino.spi.type.MapType, int, int, ===java.util.Optional&lt;boolean[]&gt;===, int[], io.trino.spi.block.Block, io.trino.spi.block.Block, io.trino.spi.block.MapHashTables)</old>
                                    <new>parameter io.trino.spi.block.MapBlock io.trino.spi.block.MapBlock::createMapBlockInternal(io.trino.spi.type.MapType, int, int, ===java.util.Optional&lt;byte[]&gt;===, int[], io.trino.spi.block.Block, io.trino.spi.block.Block, io.trino.spi.block.MapHashTables)</new>
                                    <parameterIndex>3</parameterIndex>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.method.parameterTypeParameterChanged</code>
                                    <old>parameter io.trino.spi.block.MapBlock io.trino.spi.block.MapBlock::fromKeyValueBlock(===java.util.Optional&lt;boolean[]&gt;===, int[], io.trino.spi.block.Block, io.trino.spi.block.Block, io.trino.spi.type.MapType)</old>
                                    <new>parameter io.trino.spi.block.MapBlock io.trino.spi.block.MapBlock::fromKeyValueBlock(===java.util.Optional&lt;byte[]&gt;===, int[], io.trino.spi.block.Block, io.trino.spi.block.Block, io.trino.spi.type.MapType)</new>
                                    <parameterIndex>0</parameterIndex>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.method.parameterTypeParameterChanged</code>
                                    <old>parameter io.trino.spi.block.MapBlock io.trino.spi.block.MapBlock::fromKeyValueBlock(===java.util.Optional&lt;boolean[]&gt;===, int[], int, io.trino.spi.block.Block, io.trino.spi.block.Block, io.trino.spi.type.MapType)</old>
                                    <new>parameter io.trino.spi.block.MapBlock io.trino.spi.block.MapBlock::fromKeyValueBlock(===java.util.Optional&lt;byte[]&gt;===, int[], int, io.trino.spi.block.Block, io.trino.spi.block.Block, io.trino.spi.type.MapType)</new>
                                    <parameterIndex>0</parameterIndex>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.method.parameterTypeParameterChanged</code>
                                    <old>parameter io.trino.spi.block.RowBlock io.trino.spi.block.RowBlock::fromNotNullSuppressedFieldBlocks(int, ===java.util.Optional&lt;boolean[]&gt;===, io.trino.spi.block.Block[])</old>
                                    <new>parameter io.trino.spi.block.RowBlock io.trino.spi.block.RowBlock::fromNotNullSuppressedFieldBlocks(int, ===java.util.Optional&lt;byte[]&gt;===, io.trino.spi.block.Block[])</new>
                                    <parameterIndex>1</parameterIndex>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.method.parameterTypeParameterChanged</code>
                                    <old>parameter void io.trino.spi.block.ShortArrayBlock::&lt;init&gt;(int, ===java.util.Optional&lt;boolean[]&gt;===, short[])</old>
                                    <new>parameter void io.trino.spi.block.ShortArrayBlock::&lt;init&gt;(int, ===java.util.Optional&lt;byte[]&gt;===, short[])</new>
                                    <parameterIndex>1</parameterIndex>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.method.parameterTypeParameterChanged</code>
                                    <old>parameter void io.trino.spi.block.VariableWidthBlock::&lt;init&gt;(int, io.airlift.slice.Slice, int[], ===java.util.Optional&lt;boolean[]&gt;===)</old>
                                    <new>parameter void io.trino.spi.block.VariableWidthBlock::&lt;init&gt;(int, io.airlift.slice.Slice, int[], ===java.util.Optional&lt;byte[]&gt;===)</new>
                                    <parameterIndex>3</parameterIndex>
                                </item>
                                <item>
                                    <ignore>true</ignore>
                                    <code>java.method.parameterTypeParameterChanged</code>
                                    <old>parameter io.trino.spi.block.MapBlock io.trino.spi.type.MapType::createBlockFromKeyValue(===java.util.Optional&lt;boolean[]&gt;===, int[], io.trino.spi.block.Block, io.trino.spi.block.Block)</old>
                                    <new>parameter io.trino.spi.block.MapBlock io.trino.spi.type.MapType::createBlockFromKeyValue(===java.util.Optional&lt;byte[]&gt;===, int[], io.trino.spi.block.Block, io.trino.spi.block.Block)</new>
                                    <parameterIndex>0</parameterIndex>
                                </item>
                            </differences>
                        </revapi.differences>
                    </analysisConfiguration>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.revapi</groupId>
                        <artifactId>revapi-java</artifactId>
                        <version>0.28.1</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
